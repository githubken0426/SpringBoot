<?xml version="1.0" encoding="UTF-8"?>
<!-- 一、
	<configuration>：根节点，包含下面三个属性： scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 
	scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 
-->
<configuration scan="true" scanPeriod="1 seconds" debug="true">
	<!-- 有时我们需要在logback中做一些动态配置，比如日志等级、输出路径等，这些信息可以存放在数据库中，启动时加载，可以用logback自带的contextListener。 -->
	<contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
		<resetJUL>true</resetJUL>
	</contextListener>
	
	<jmxConfiguration/>
		<!-- 二、
			property：用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。
　　　　		name: 变量的名称,value: 的值时变量定义的值 
		-->
		<property name="APP_Name" value="SrpingBoot_ken" />
		<property name="LOG_PATH" value="/logs" />
		<!-- 三、
			contextName：用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。 
			但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改 。
		-->
		<contextName>${APP_Name}</contextName>
		<!-- 四、
			<timestamp>：获取时间戳字符串，
			key: 标识此<timestamp> 的名字；
			datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。
		 -->
		<timestamp key="my_time" datePattern="yyyy-MM-dd HH:mm:ss"/>
		<!--五、 <appender>：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名 -->
		<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
			<!-- 5.1
				ConsoleAppender 把日志输出到控制台，有以下子节点：
				<encoder>：对日志进行格式化。（具体参数稍后讲解 ）
				<target>：字符串System.out(默认)或者System.err -->
			<encoder>
				<pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>
			</encoder>
		</appender>
		<!-- 5.2 
			FileAppender：把日志添加到文件，有以下子节点： 
			<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。 
			<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
		-->
		<appender name="FILE" class="ch.qos.logback.core.FileAppender">
			<file>>${LOG_PATH}/${APP_Name}.%d{yyyy-MM-dd}.log</file>
			<append>true</append>
			<encoder>
				<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n
				</pattern>
			</encoder>
		</appender> 
		<!-- 
			RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件
			SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender
		 -->
		<logger name="com.apache.ibatis" level="TRACE"/>
		<logger name="java.sql.Connection" level="DEBUG"/>
		<logger name="java.sql.Statement" level="DEBUG"/>
		<logger name="java.sql.PreparedStatement" level="DEBUG"/>
		<root level="DEBUG"> 
　　　　　　　　<appender-ref ref="STDOUT" /> 
　　　　　　</root> 
		
</configuration>